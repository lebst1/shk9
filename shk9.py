import logging
import asyncio
import re
import time
import sqlite3

from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "message_stats.db"


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async def create_table():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_stats (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            last_message_time TIMESTAMP,
            messages_hour INTEGER DEFAULT 0,
            messages_day INTEGER DEFAULT 0,
            messages_total INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()


# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
loop = asyncio.get_event_loop()
loop.run_until_complete(create_table())


async def update_user_stats(user_id: int, username: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM message_stats WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    now = datetime.now()
    if row:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        last_message_time = datetime.strptime(row[2], '%Y-%m-%d %H:%M:%S.%f')
        if now - last_message_time <= timedelta(hours=1): 
            cursor.execute('''
                UPDATE message_stats SET 
                    last_message_time = ?, 
                    messages_hour = messages_hour + 1,
                    messages_day = messages_day + 1,
                    messages_total = messages_total + 1
                WHERE user_id = ?
            ''', (now, user_id))
        elif now - last_message_time <= timedelta(days=1):
            cursor.execute('''
                UPDATE message_stats SET 
                    last_message_time = ?, 
                    messages_hour = 1,
                    messages_day = messages_day + 1,
                    messages_total = messages_total + 1
                WHERE user_id = ?
            ''', (now, user_id))
        else:
            cursor.execute('''
                UPDATE message_stats SET 
                    last_message_time = ?, 
                    messages_hour = 1,
                    messages_day = 1,
                    messages_total = messages_total + 1
                WHERE user_id = ?
            ''', (now, user_id))
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
        cursor.execute('''
            INSERT INTO message_stats (user_id, username, last_message_time, messages_hour, messages_day, messages_total)
            VALUES (?, ?, ?, 1, 1, 1)
        ''', (user_id, username, now))

    conn.commit()
    conn.close()


from aiogram import Dispatcher, Bot, executor, types, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
   

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardMarkup, KeyboardButton, \
    ChatPermissions
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext 
from aiogram.contrib.middlewares.logging import LoggingMiddleware



CHANNEL_ID = -1002288345419
ADMIN_CHAT_ID = -4566366187

authorized_users = {983681689, 1228200514}

blocked_words = []
banned_users = []
moderation_chat_id = -4538417819

moderation_messages = {}

logging.basicConfig(level=logging.INFO)

bot = Bot('7389926138:AAGs4rlT6bw9OlxDSj8b7qYMJYo_UDXloTg')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
user_cooldowns = {}
# –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
MESSAGE_DELAY = 5

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: unmute_time)
muted_users = {}

deleted_messages_count = 0

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
ADMIN_ID_DELETE = [1228200514] # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ê–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
ADMINS = [1228200514]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# C–ª–æ–≤–∞—Ä—å –¥–ª—è –∑—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
moderation_photos = {}


dp.middleware.setup(LoggingMiddleware())

class DeletePost(StatesGroup):
    waiting_for_post = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    user_name = message.from_user.first_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —á—ë –ø–æ–¥—Å–ª—É—à–∞–ª)\n"
    )

    keyboard = ReplyKeyboardMarkup(row_width=1)
    keyboard.add(
        KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üì®")
    )
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboard)

@dp.message_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üì®")
async def handle_send_message(message: types.Message):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        InlineKeyboardButton("üëª –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data="send_anon"), 
        InlineKeyboardButton("üòé –ü—É–±–ª–∏—á–Ω–æ", callback_data="send_public")
    )
    await message.answer(f"ü§´ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: ", reply_markup=keyboard)


class SendMessageStates(StatesGroup):
    waiting_for_message = State()


@dp.callback_query_handler(lambda c: c.data.startswith('send_'))
async def choose_send_mode(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º,
    —Å–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    send_mode = callback_query.data.split('_')[1]
    await dp.storage.set_data(chat=callback_query.from_user.id, data={'send_mode': send_mode})
    await callback_query.message.edit_text(
        f"‚úÖ –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: {'–∞–Ω–æ–Ω–∏–º–Ω—ã–π' if send_mode == 'anon' else '–ø—É–±–ª–∏—á–Ω—ã–π'}\n"
        f"‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await state.set_state(SendMessageStates.waiting_for_message)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def delayed_send(message: types.Message, send_mode: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏.
    """
    if any(word in message.text for word in blocked_words):
        moderation_messages[message.message_id] = message
        await bot.send_message(moderation_chat_id,
                               f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\nüÜî ID: {message.message_id}\nüë®üèª‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\n‡¥¶‡µç‡¥¶‡¥ø(Àµ ‚Ä¢ÃÄ ·¥ó - Àµ ) ‚úß –¢–µ–∫—Å—Ç: {message.text}")
    else:
        if send_mode == 'anon':
            await bot.copy_message(CHANNEL_ID, message.from_user.id, message.message_id)
        else:
            await message.forward(CHANNEL_ID)


def update_blocked_words(new_words):
    global blocked_words
    blocked_words.extend(new_words)


async def send_chat_notification(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
    –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        user = message.from_user
        text = (
            f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç üë§ {user.mention} ({user.full_name})\n"
            f"üÜî ID: tg://user?id= {user.id} \n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
        if message.text:
            text += f"üí¨ –¢–µ–∫—Å—Ç: {message.text}\n"
        elif message.caption:
            text += f"üìé –§–∞–π–ª: {message.caption}\n"
        else:
            text += "üìé –§–∞–π–ª –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"

        await bot.send_message(
            ADMIN_CHAT_ID,
            text
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

class AdminStates(StatesGroup):
    waiting_for_admin_id = State()


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMINS


@dp.message_handler(commands=['addword'])
async def add_blocked_word(message: types.Message):
    try:
        new_word = message.text.split(' ', 1)[1]  # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ–±–µ–ª—É
        update_blocked_words([new_word])
        await message.answer(f"–°–ª–æ–≤–æ '{new_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    except IndexError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /addword.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(state=SendMessageStates.waiting_for_message, content_types=types.ContentType.ANY)
async def handle_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫—É, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    global user_cooldowns
    user_id = message.from_user.id

    if user_id in user_cooldowns and user_cooldowns[user_id] > asyncio.get_event_loop().time():
        remaining_time = int(user_cooldowns[user_id] - asyncio.get_event_loop().time())
        await message.reply(f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥.")
        return

    user_data = await dp.storage.get_data(chat=message.from_user.id)
    send_mode = user_data.get('send_mode', 'anon')

    try:
        await delayed_send(message, send_mode)
        await send_chat_notification(message)

        user_cooldowns[user_id] = asyncio.get_event_loop().time() + MESSAGE_DELAY
        if any(word in message.text for word in blocked_words):
            await message.answer(
                "–í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ø–æ—ç—Ç–æ–º—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ üëÆ")
        else:
            await message.reply("üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.finish()

@dp.message_handler(lambda message: message.text.lower().startswith('–æ–¥–æ–±—Ä–∏—Ç—å'))
async def approve_message(message: types.Message):
    if len(message.text.split()) > 1:
        message_id = int(message.text.split()[1])
        if message_id in moderation_messages:
            approved_message = moderation_messages[message_id]
            await bot.send_message(CHANNEL_ID, approved_message.text)
            await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
        else:
            await message.answer(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –æ–¥–æ–±—Ä–∏—Ç—å <id —Å–æ–æ–±—â–µ–Ω–∏—è>")


@dp.message_handler(commands=['–æ—Ç–∫–ª–æ–Ω–∏—Ç—å'])
async def reject_message(message: types.Message):
    await message.answer(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")


@dp.callback_query_handler(lambda query: query.data == "approve")
async def approve_callback(query: types.CallbackQuery):
    await bot.send_message(CHANNEL_ID, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")
    await query.answer(" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")


@dp.callback_query_handler(lambda query: query.data == "reject")
async def reject_callback(query: types.CallbackQuery):
    await query.answer(" –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# <-------------------------------------------------------> #

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    photo_id = message.photo[-1].file_id
    moderation_photos[message.message_id] = message
    sender_info = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.first_name}"
    if message.from_user.username:
        sender_info += f" (@{message.from_user.username})"
    caption = f"{sender_info}\n"
    caption += message.caption if message.caption else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.row(
        InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_photo {message.message_id}"),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_photo {message.message_id}")
    )
    
    await bot.send_photo(ADMIN_CHAT_ID, photo_id, caption=caption, reply_markup=inline_keyboard)



@dp.callback_query_handler(lambda query: query.data.startswith('approve_photo'))
async def approve_photo_callback(query: types.CallbackQuery):
    message_id = int(query.data.split()[1])
    if message_id in moderation_photos:
        approved_photo = moderation_photos[message_id]
        await bot.send_photo(CHANNEL_ID, approved_photo.photo[-1].file_id, caption=approved_photo.caption)
        await query.answer("–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    else:
        await query.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@dp.callback_query_handler(lambda query: query.data.startswith('reject_photo'))
async def reject_photo_callback(query: types.CallbackQuery):
    message_id = int(query.data.split()[1])
    if message_id in moderation_photos:
        del moderation_photos[message_id]
        await query.answer("–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    else:
        await query.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")




@dp.message_handler(lambda message: any(entity.type == 'url' and 'youtube.com' in message.text for entity in message.entities), content_types=types.ContentType.TEXT)
async def block_youtube_links(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ YouTube —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")


# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class States(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['watch'])
async def start_command(message: types.Message):
    await message.answer("–Ø —Å–ª–µ–∂—É –∑–∞ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ!")


async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    
    # Check if the message contains a GIF or sticker
    if message.sticker or message.animation:
        if user_id not in authorized_users:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GIF –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã.")
            return  # Stop processing this message


@dp.message_handler()
async def handle_message(message: types.Message):
    if message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_id = message.from_user.id
        username = message.from_user.username
        await update_user_stats(user_id, username)
    else:
        await message.reply("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
